name: azure-deploy-only
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag a desplegar (latest, vX.Y, o SHA)"
        required: false
        default: latest
      wait_ssh:
        description: "Esperar SSH antes de desplegar"
        type: boolean
        default: true

permissions:
  contents: read
  packages: read

env:
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT || 22 }}
  DEPLOY_DIR: /opt/app

jobs:
  maybe_wait_ssh:
    runs-on: ubuntu-latest
    if: ${{ inputs.wait_ssh }}
    steps:
      - name: Esperar SSH
        run: |
          echo "Esperando SSH en ${{ env.SSH_HOST }}:${{ env.SSH_PORT }} ..."
          for i in {1..60}; do
            if nc -z ${{ env.SSH_HOST }} ${{ env.SSH_PORT }}; then
              echo "SSH arriba."; exit 0
            fi
            sleep 5
          done
          echo "Timeout esperando SSH." && exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: [maybe_wait_ssh]
    steps:
      - name: Calcular imagen (lowercase GHCR)
        id: img
        shell: bash
        run: |
          set -euo pipefail
          REPO_LC="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          echo "image=ghcr.io/${REPO_LC}" >> "$GITHUB_OUTPUT"
          echo "tag=${{ github.event.inputs.tag || 'latest' }}" >> "$GITHUB_OUTPUT"

      - name: Desplegar por SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="${{ steps.img.outputs.image }}"
            TAG="${{ steps.img.outputs.tag }}"

            sudo mkdir -p "${{ env.DEPLOY_DIR }}"
            cd "${{ env.DEPLOY_DIR }}"

            # Login GHCR con PAT (read:packages)
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            export IMAGE="$IMAGE"
            export TAG="$TAG"

            docker compose -f deploy-compose.yml pull
            docker compose -f deploy-compose.yml up -d --remove-orphans
            docker image prune -af || true